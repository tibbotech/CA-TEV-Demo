'*************************************************************************************************************************
'           INPUT_BOX
'	Input box is used to edit string type settings on the LCD screen. (for example: names, ip, password)
'
'*************************************************************************************************************************
include "global.tbh"

declare on_kp_event_dest as on_kp_event_destinations
declare on_sys_timer_event_dest as on_sys_timer_event_destinations

declare sub ib_print
declare sub ib_str_pos_selector

dim lcd_num_index, lcd_pos_index, sourcestr_index, ib_len, display_len, display_start_index, ib_input_length as byte
dim pos_x, pos_y, cursor_x, prev_x as byte
dim sourcestr, mask as string(IB_MAX_LEN)
dim ib_str as string(IB_MAX_LEN+2)
dim chr_group(36) as string(1)
dim ib_secret_mode, ib_insert_mode as no_yes
dim input_type as input_box_char_ranges
dim input_box_result as ui_input_box_results
dim ib_timeout_ctr, ib_timeout as byte
dim b_upper, b_lower as byte

'---------------------------------------------------------------------------------------
public function ui_input_box(
	byref mask_str as string(IB_MAX_LEN),	'uneditable part of the input string
	byref edit_str as string(IB_MAX_LEN),	'input string
	char_range as input_box_char_ranges,	'the input range. INPUT_BOX_CHAR_RANGE_09 only allows numeric input, INPUT_BOX_CHAR_RANGE_AZ allows alphabetic, INPUT_BOX_CHAR_RANGE_09AZ allows both numeric and alphabetic input.
	x_coord as word,				'x coordination
	y_coord as word,				'y coordination
	width as byte,					'the width of input box
	secret_mode as no_yes,			'if secret_mode = yes, all editable part of the input string will be display on the LCD as "*", this are mostly used for password.
	insert_mode as no_yes,			'if insert_mode = yes, the new character is insert before the cursor, if insert_mode = no, the character replaces the character at the cursor position.
	initial_pos as byte,			'initial cursor position
	timeout as byte,				'if no keypad activity for the amount of time defined by timeout, input box is automatically closed and return to previous screen.
	input_length as byte			'the maximum number of characters
) as ui_input_box_results	
'The main function of input box module.
	dim i, b as byte
	dim backup_on_kp_event_dest as on_kp_event_destinations
	dim backup_on_sys_timer_event_dest as on_sys_timer_event_destinations
	romfile.open(LCD_FIX_FONT)
	lcd.setfont(romfile.offset)	
	lcd.texthorizontalspacing=1
	sourcestr = ""
	mask = mask_str
	pos_x = x_coord
	pos_y = y_coord
	ib_secret_mode = secret_mode
	ib_insert_mode = insert_mode
	ib_timeout_ctr = timeout
	ib_timeout = timeout
	ib_input_length = 0
	input_box_result = INPUT_BOX_RESULT_TIMEOUT
	input_type = char_range
	display_len = width/(lcd.getprintwidth("0")+lcd.texthorizontalspacing)-2
	if insert_mode = NO and initial_pos < 1 then
		initial_pos = 1
	end if
	if mask = "" then
		for i = 1 to len(edit_str)
			mask = mask + CHR(&h20)
		next i
	end if
	for i = 1 to len(mask)
		if mid(mask,i,1) = CHR(&h20) then
			ib_input_length = ib_input_length + 1
		end if
	next i 
	if ib_input_length < input_length then
		ib_input_length = input_length
	end if
	sourcestr_index = initial_pos
	lcd_pos_index = initial_pos
	display_start_index = 1
	for i = 1 to len(edit_str)
		if mid(mask,i,1) = CHR(&h20) then
			sourcestr = sourcestr + mid(edit_str,i,1)
		else
			if not(i > lcd_pos_index) then
				sourcestr_index = sourcestr_index -1
			end if
		end if
	next i	
	if insert_mode = no and len(sourcestr) = 0 then 
		sourcestr = sourcestr + chr(&h20)
		mask = mask + chr(&h20)
	end if
	for i = 0 to 9
		chr_group(i) = str(i)
	next i
	for i = 10 to 35
		b = 87 + i
		chr_group(i) = chr(b)
	next i
	select case input_type 
		case INPUT_BOX_CHAR_RANGE_09:
			b_upper = 9
			b_lower = 0
		case INPUT_BOX_CHAR_RANGE_AZ:
			b_upper = 35
			b_lower = 10
		case INPUT_BOX_CHAR_RANGE_09AZ:
			b_upper = 35
			b_lower = 0
	end select
	for i = 0 to 35 
		if mid(sourcestr,sourcestr_index,1) = chr_group(i) then 
			lcd_num_index = i
			exit for
		else 
			lcd_num_index = b_upper
		end if
	next i 
	ib_print
	ib_str_pos_selector	

	backup_on_kp_event_dest=on_kp_event_dest
	backup_on_sys_timer_event_dest=on_sys_timer_event_dest
	on_kp_event_dest=ON_KP_EVENT_DEST_INPUT_BOX
	on_sys_timer_event_dest=ON_SYS_TIMER_EVENT_DEST_INPUT_BOX

wait:
	doevents
	if input_box_result<>INPUT_BOX_RESULT_TIMEOUT then
		ui_input_box=input_box_result
		goto key_pressed
	end if
	
	if timeout=0 then
		goto wait
	else
		if ib_timeout_ctr=0 then
			ui_input_box=INPUT_BOX_RESULT_TIMEOUT
key_pressed:		
			if input_box_result = INPUT_BOX_RESULT_OK then
				edit_str = sourcestr
				mask_str = mask
			end if
			on_kp_event_dest=backup_on_kp_event_dest
			on_sys_timer_event_dest=backup_on_sys_timer_event_dest
			lcd_clear(pos_x,pos_y,lcd.getprintwidth(ib_str+"]"),FONT_HEIGHT+2)
			exit function
		end if
		goto wait
	end if	
end function

'---------------------------------------------------------------------------------------
function ib_insert_format(edit_str as string(IB_MAX_LEN), mask_str as string(IB_MAX_LEN)) as string(IB_MAX_LEN)
'edit_str contains the editable part of the input string, mask_str contains the uneditable part.  They are separated during editing process, this function put them back together.
	dim i, j, k, l as byte
	dim s1 as string(IB_MAX_LEN)
	k = 1
	l = 0
	for i = 1 to len(mask_str)
		if mid(mask_str,i,1) = CHR(&h20) then
			if not(k > len(edit_str)) then
				s1 = s1 + mid(edit_str,k,1)
			else
				s1 = s1 + CHR(&h20)
			end if
			k = k+1
		else
		s1 = s1 + mid(mask_str,i,1)
		j = i
		l = l+1
		end if
	next i
	if len(edit_str)+l < j then
		s1 = left(s1,j)
	else
		s1 = left(s1,len(edit_str)+l)
	end if
	ib_insert_format = s1
end function

'---------------------------------------------------------------------------------------
sub ib_str_pos_increament(restart as no_yes)
'Move the cursor in the input box to the right
	dim i as byte
	if sourcestr_index = len(sourcestr) and ib_insert_mode = NO and right(sourcestr,1) <> chr(&h20) and len(sourcestr) < ib_input_length then
		sourcestr = sourcestr + chr(&h20)
		mask = mask + chr(&h20)
	end if 
    if sourcestr_index < len(sourcestr) then
		lcd_pos_index = lcd_pos_index + 1 
		sourcestr_index = sourcestr_index+1	
		if mid(mask,lcd_pos_index,1) <> CHR(&h20) and not(lcd_pos_index > len(mask)) then
			lcd_pos_index = lcd_pos_index + 1
		end if
		if lcd_pos_index - display_start_index+1 > display_len then
			display_start_index = lcd_pos_index - display_len +1
		end if
	else
		if restart = YES then
		sourcestr_index = 1
		lcd_pos_index = 1
		display_start_index = 1
		end if
	end if
	for i = 0 to 35 
		if mid(sourcestr,sourcestr_index,1) = chr_group(i) then 
			lcd_num_index = i
			exit for
		else 
			lcd_num_index = b_upper
		end if
	next i 
end sub

'---------------------------------------------------------------------------------------
sub ib_str_pos_decreament
'Move the cursor in the input box to the left
	dim b,i as byte
	if ib_insert_mode = YES then b = 0
	if ib_insert_mode = NO then b = 1
	if lcd_pos_index > b then
		lcd_pos_index = lcd_pos_index - 1 
		sourcestr_index = sourcestr_index-1	
		if mid(mask,lcd_pos_index,1) <> CHR(&h20) and lcd_pos_index > 0  then
			lcd_pos_index = lcd_pos_index - 1
		end if
		if lcd_pos_index > display_len/2 then
			b = lcd_pos_index - display_len/2
			else 
			b = 1
		end if 
		if not(lcd_pos_index > display_start_index) then 
			display_start_index = b
		end if
	end if	
	for i = 0 to 35 
		if mid(sourcestr,sourcestr_index,1) = chr_group(i) then 
			lcd_num_index = i
			exit for
		else 
			lcd_num_index = b_upper
		end if
	next i 
end sub

'---------------------------------------------------------------------------------------
sub ib_backspace
'Remove the character that on the left of the cursor.
	dim s1, s2 as string(IB_MAX_LEN)
	dim i,j,k as byte
	if sourcestr_index > 0 then
		if ib_insert_mode = YES then
			s1 = left(sourcestr, sourcestr_index-1)
			s2 = right(sourcestr, len(sourcestr)-sourcestr_index)
		else
			if sourcestr_index < 2 then exit sub
			s1 = left(sourcestr, sourcestr_index-2)
			s2 = right(sourcestr, len(sourcestr)-sourcestr_index+1)	
		end if			
		j = 0
		for i = 1 to len(mask)
			if mid(mask,i,1) = chr(&h20) then
				j = j+1
			else
				k = i
			end if
		next i
		sourcestr = s1+s2
		if len(sourcestr) < j and len(mask) > k then
			mask = left(mask, len(mask)-1)
		end if
	end if
end sub

'---------------------------------------------------------------------------------------
sub ib_delete
'Remove the character that right above the cursor
	dim s1, s2 as string(IB_MAX_LEN)
	dim i,j,k as byte
	if sourcestr_index < len(sourcestr) or sourcestr_index = len(sourcestr) then
		if ib_insert_mode = YES then
			if sourcestr_index = len(sourcestr) then exit sub
			s1 = left(sourcestr, sourcestr_index)
			s2 = right(sourcestr, len(sourcestr)-sourcestr_index-1)	
		else
			s1 = left(sourcestr, sourcestr_index-1) 
			if sourcestr_index = len(sourcestr) then s2 = chr(&h20) else s2 = right(sourcestr, len(sourcestr)-sourcestr_index)
				
		end if		
		j = 0
		for i = 1 to len(mask)
			if mid(mask,i,1) = chr(&h20) then
				j = j+1
			else
				k = i
			end if
		next i
		sourcestr = s1+s2
		if len(sourcestr) < j and len(mask) > k then
			mask = left(mask, len(mask)-1)
			
		end if
	end if
end sub

'---------------------------------------------------------------------------------------
function remove_trailing_chr(s as string, c as string(1)) as string
'remove the empty character at the end if needed
	while right(s,1) = c
		s = left(s,len(s)-1)
	wend
	remove_trailing_chr = s
end function

'---------------------------------------------------------------------------------------
function ib_insert(s as string(1)) as boolean
'insert character in the middle of the input string
	dim s2 as string(IB_MAX_LEN)
	dim i,j as byte
	j = 0
	for i = 1 to len(mask)
		if mid(mask,i,1) = chr(&h20) then
			j = j+1
		end if
	next i
	s2 = right(sourcestr, len(sourcestr)-sourcestr_index)	
	if ib_insert_mode = YES then 
		if len(mask) < IB_MAX_LEN and len(mask) < ib_input_length then 
			sourcestr = left(sourcestr, sourcestr_index)+s+s2
		else
		ib_insert = false
		exit function
		end if
	else
		sourcestr = left(sourcestr, sourcestr_index-1)+s+s2
		if len(mask) < ib_input_length and len(sourcestr) = sourcestr_index then sourcestr = sourcestr + chr(&h20)
	end if
	if len(sourcestr) > j and len(mask) < ib_input_length then
		mask = mask + chr(&h20)
	end if
	ib_insert = true
	exit function
end function

'---------------------------------------------------------------------------------------
sub ib_print
'print the input box
	dim i, b as byte
	dim s1, s2 as string(IB_MAX_LEN)
	if ib_secret_mode = YES then
		for i = 1 to len(sourcestr)
			if mid(sourcestr,i,1) = chr(&h20) then
			s2 = s2 + chr(&h20)
			else
			s2 = s2 + "*"
			end if
		next i
		s2 = ib_insert_format(s2,mask)
	else
		s2 = ib_insert_format(sourcestr,mask)
	end if 
	if len(s2) > display_len then
		if len(s2) - display_start_index < display_len then
			display_start_index = len(s2)- display_len+1
			s1 = mid(s2,display_start_index,display_len)
			if ib_str <> "<" + s1 + "]" then
				ib_str = "<" + s1 + "]" 
			else
				exit sub
			end if
		end if
		if not(len(s2) - display_start_index < display_len) then
			if ib_str <> "<" + mid(s2,display_start_index,display_len)+ ">" then
				ib_str = "<" + mid(s2,display_start_index,display_len)+ ">" 
			else
				exit sub
			end if
		end if
		if display_start_index = 1 then
			ib_str = "["+mid(s2,display_start_index,display_len)+ ">"
		end if		
	else
	 	b = display_len-len(s2)
		for i = 1 to b
		s2 = s2 + chr(&h20)
		next i
		ib_str = "["+ s2 + "]"
		display_start_index = 1
		if len(ib_str) < ib_len then	
			lcd_clear(pos_x,pos_y,lcd.getprintwidth(ib_str+"]"),FONT_HEIGHT+2)	
		end if
		ib_len = len(ib_str)
	end if
	
	lcd_clear(1,1,1,1)
	lcd.print(ib_str, pos_x, pos_y)
end sub

'---------------------------------------------------------------------------------------
sub ib_str_pos_selector
	dim pos as byte
	dim w as byte
	dim s1,s2 as string(IB_MAX_LEN)
	pos = lcd_pos_index - display_start_index +2
		if pos > display_len+1 then
			exit sub
		end if
	s1 = mid(ib_str,pos,1)
	s2 = left(ib_str,pos-1)
	w = lcd.getprintwidth(s1)
	cursor_x = lcd.getprintwidth(s2)
	cursor_x = pos_x+cursor_x
	if ib_insert_mode = YES then
		lcd_clear(prev_x+w+2,pos_y-1,1,FONT_HEIGHT+2)
		lcd.fill(cursor_x+w+2,pos_y-1,1,FONT_HEIGHT+2)
		prev_x = cursor_x	
	else
		lcd_clear(pos_x,pos_y+FONT_HEIGHT+1,lcd.getprintwidth(ib_str),2)
		lcd.fill(cursor_x+1,pos_y+FONT_HEIGHT+1,w,1)	
	end if
end sub

'---------------------------------------------------------------------------------------
sub ib_chr_changing
	dim s1, s2 as string(IB_MAX_LEN)
	dim i as byte

	if ib_insert_mode = NO then
		lcd_num_index = lcd_num_index + 1
		if lcd_num_index > b_upper then
			lcd_num_index = b_lower
		end if
		s1 = left(sourcestr,sourcestr_index-1)
		s2 = right(sourcestr,len(sourcestr)-sourcestr_index)
		sourcestr = s1+chr_group(lcd_num_index)+s2
		lcd.print(chr_group(lcd_num_index),cursor_x+1,pos_y)
	end if
end sub

'---------------------------------------------------------------------------------------
sub ib_overwirte(s as string(1))
	ib_insert(s)
	ib_str_pos_increament(yes)
	ib_print
	ib_str_pos_selector
end sub
'---------------------------------------------------------------------------------------
public sub ui_input_box_key_proc(key_event as pl_kp_event_codes, key_code as byte)
	ib_timeout_ctr = ib_timeout
	select case key_event 
	case PL_KP_EVENT_PRESSED:
	beep.divider = 20000
	beep.play("B-",PL_BEEP_CANINT)
	key_led_pressed(key_code)
		select case key_code
		case keycodeF1:

			input_box_result = INPUT_BOX_RESULT_CANCEL
			exit sub
			
		case keycodeF2:		
			ib_str_pos_increament(yes)
			ib_print
			ib_str_pos_selector

			exit sub
					
		case keycodeF3:		

			ib_backspace
			if sourcestr_index > 0 then
				ib_str_pos_decreament
			end if
			ib_print
			ib_str_pos_selector
			
			exit sub			
		case keycodeF4:	
	
			sourcestr = ib_insert_format(sourcestr, mask)
			sourcestr = remove_trailing_chr(sourcestr, chr(&h20)) 
			input_box_result = INPUT_BOX_RESULT_OK 

			exit sub

		case keycode0:
			ib_overwirte("0")
		case keycode1:
			ib_overwirte("1")
		case keycode2:
			ib_overwirte("2")
		case keycode3:
			ib_overwirte("3")
		case keycode4:
			ib_overwirte("4")
		case keycode5:
			ib_overwirte("5")
		case keycode6:
			ib_overwirte("6")
		case keycode7:
			ib_overwirte("7")
		case keycode8:
			ib_overwirte("8")
		case keycode9:
			ib_overwirte("9")
		case keycodeE:
			sourcestr = ib_insert_format(sourcestr, mask)
			sourcestr = remove_trailing_chr(sourcestr, chr(&h20)) 
			input_box_result = INPUT_BOX_RESULT_OK 
		case keycodeC:
			input_box_result = INPUT_BOX_RESULT_CANCEL

		end select
	case PL_KP_EVENT_RELEASED:
		key_led_reset
	case PL_KP_EVENT_LONGPRESSED:

	end select
end sub

'---------------------------------------------------------------------------------------
sub ui_input_box_timer_proc
'count input box time out
	if ib_timeout_ctr>0 then
		ib_timeout_ctr=ib_timeout_ctr-1
	end if
end sub
