'***********************************************************************************************************
'			SETTINGS LIBRARY
'***********************************************************************************************************

include "global.tbh"  

Const STG_FIELD_SEPARATOR=9
Const STG_END_OF_LINE=13

public dim sdr(MAX_NUM_SETTINGS) as sdr_type
public dim num_stg as byte

declare sub check_for_missing_fields(curr_pos as word, line_end_pos as word)

'-------------------------------------------------------------
public sub settings_init
'This procedure MUST BE called before any other function in this library is used. It initializes
'necessary global structure sdr() and related stuff.

	dim s as string(24)
	dim i,c,line_end as word
	dim f,x as byte
	
	num_stg=0 'will count settings (starting from 0)
	
	romfile.open("settings.txt")				'this file is a setting descriptor table
	i=romfile.find(romfile.pointer,">>",1)
	while i<>0
		'we are now at the ">>" pointing at the beginning of one setting descriptor line
		romfile.pointer=i+2
		
		'find the end of this setting descriptor line
		line_end=romfile.find(romfile.pointer,chr(STG_END_OF_LINE),1)
		
		'extract setting name
		do
			i=romfile.find(romfile.pointer,chr(STG_FIELD_SEPARATOR),1) 
			check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		'name too long?
		if len(s)>MAX_SETTING_NAME_LEN then
			sys.halt
			num_stg=0 'you need to increase MAX_SETTING_NAME_LEN!
		end if
		sdr(num_stg).name=s

		'extract setting type
		do
			i=romfile.find(romfile.pointer,chr(STG_FIELD_SEPARATOR),1) 
			check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		sdr(num_stg).stype=asc(s)

		'extract the number of members
		do
			i=romfile.find(romfile.pointer,chr(STG_FIELD_SEPARATOR),1) 
			check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		sdr(num_stg).members=val(s)
		
		'extract p1
		do
			i=romfile.find(romfile.pointer,chr(STG_FIELD_SEPARATOR),1) 
			check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		sdr(num_stg).p1=val(s)

		'extract p2
		do
			i=romfile.find(romfile.pointer,chr(STG_FIELD_SEPARATOR),1) 
			check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		sdr(num_stg).p2=val(s)

		'extract initialization mode
		do
			i=romfile.find(romfile.pointer,chr(STG_FIELD_SEPARATOR),1) 
			check_for_missing_fields(i,line_end)			
			s=romfile.getdata(i-romfile.pointer)
			romfile.pointer=i+1
		loop while s="" 		
		sdr(num_stg).ini=asc(s)

		'memorize the offset of the default value
		do
			s=romfile.getdata(1)
		loop while s=chr(STG_FIELD_SEPARATOR)
		'are we at the end of the string?
		if s=chr(STG_END_OF_LINE) then
			sys.halt
			num_stg=0 'default value field is missing in the descriptor
		end if
		sdr(num_stg).romaddr_def=romfile.pointer-1

		'done with this setting, move to next one
		i=romfile.find(romfile.pointer,">>",1)
		num_stg=num_stg+1
		c=c+x
	
		'exceeded the max number of settings?
		if num_stg>=MAX_NUM_SETTINGS and i<>0 then
			sys.halt
			num_stg=0 'you need to increase MAX_NUM_SETTINGS!
		end if
	
	wend

	'now calculate eeprom addresses
	c=1 'will count offset in the EEPROM (addresses start from 1).
	for f=0 to num_stg-1
		sdr(f).eeaddr=c
		select case chr(sdr(f).stype)
		case "B":	'byte (takes 2 bytes in storage- 1 byte of data and checksum)
			x=2
		case "W":	'word (takes 3 bytes in storage- 2 bytes of data and checksum)
			x=3
		case else:	'string or dot-decimal string (takes max_len + 2 bytes in storage- len and cs)
			x=2+sdr(f).p2
		end select
		
		sdr(f).member_size=x 	'fill out member length
		c=c+x*sdr(f).members	'update EEPROM address counter
	next f

	'exceeded EEPROM capacity?
	if c>=stor.size then
		sys.halt
		num_stg=0 'your settings do not fit in the EEPROM!
	end if

end sub

sub check_for_missing_fields(curr_pos as word, line_end_pos as word)
	if curr_pos=0 or curr_pos>line_end_pos then
		sys.halt
		'one of your descriptor lines has missing fields
	end if
end sub

'-------------------------------------------------------------
public function settings_restore_def(init_field_override as no_yes) as en_stg_status
'Initializes settings. 
'When init_field_override=NO, a particular setting is initialized only when the "Ini" field for this
'setting is "A" or when the setting is invalid.
'When init_field_override=YES, all settings are initialized irregardless of other factors.

	dim x,f,f2 as byte
	dim pos as word
	dim s as string(64)
	dim s2,s3 as string(32)
	
	romfile.open("settings.txt")
	
	for f=0 to num_stg-1
		for f2=0 to sdr(f).members-1
			'do we need to initialize this setting?
			if sdr(f).ini=`A` or init_field_override=YES or setting_sg(sdr(f).name,f2,s3,EN_STG_GET)<>EN_STG_STATUS_OK then
				'yes, initialization is required- get default value
				romfile.pointer=sdr(f).romaddr_def
				pos=romfile.find(romfile.pointer,chr(STG_END_OF_LINE),1)
				s3=romfile.getdata(pos-romfile.pointer)
	
				'is default value a NULL string?
				if len(s3)=1 and s3="^" then
					s3=""
				end if
				
				'OK, set this default value
				x=setting_sg(sdr(f).name,f2,s3,EN_STG_SET)
				if x<>EN_STG_STATUS_OK then
					settings_restore_def=x
					exit function
				end if
			end if
		next f2
	next f

	'all OK!
	settings_restore_def=EN_STG_STATUS_OK
end function


'-------------------------------------------------------------
public function setting_get(byref stg_name as string, index as byte) as string 
'High- level function to extract setting value. It sits on top of the setting_sg() and does the
'following: (1) if setting is OK then setting_get() just returns its value, (2) if setting is invalid
'then default value is returned instead and setting_error_detected procedure is called,
'(3) if the setting is not found then empty string is returned.
'Setting_error_detected procedure is not a part of this library, so it must be implemented elsewhere. 


		dim s as string
		select case setting_sg(stg_name,index,s,EN_STG_GET)
		case EN_STG_STATUS_OK:
			setting_get = s
			exit function
		case EN_STG_STATUS_UNKNOWN:
			setting_get=""
		case else:
			setting_get_def(stg_name,s)
			setting_get = s
			setting_error_detected()
		end select
end function


'-------------------------------------------------------------
public function setting_sg(byref stg_name as string, index as byte, byref stg_value as string, op as en_stg_rdwr) as en_stg_status
'Reads/writes setting stg_name, value is exchanged through stg_value. Read or write operation is
'determined by op. Returns various en_stg_status status codes.
	
	dim x,cs,f as byte
	dim i as word
	dim s as string(64)
	dim stg_str as string(32)
	dim s3 as string(4)
	dim num as byte
	
	'does this setting exist?
	num=setting_find(stg_name)
	if num=0 then
		'unknown setting
		setting_sg=EN_STG_STATUS_UNKNOWN
		exit function
	end if
	num=num-1

	'is index valid?
	if index>=sdr(num).members then
		'invalid index
		setting_sg=EN_STG_STATUS_INVALID_INDEX
		exit function
	end if


	'is this a read or a write?
	if op=EN_STG_GET then

		'Read! Branch according to the setting type
		select case chr(sdr(num).stype)
		case "B":	'byte (takes 2 bytes in storage- 1 byte of data and checksum)
			x=2
		case "W":	'word (takes 3 bytes in storage- 2 bytes of data and checksum)
			x=3
		case else:	'string or dot-decimal string (takes max_len + 2 bytes in storage- len and cs)
			x=asc(stor.getdata(sdr(num).eeaddr,1))+2
		end select		
		
		'now x contains the number of bytes to read. Read, calc checksum, verify it
		stg_str=stor.getdata(sdr(num).eeaddr+sdr(num).member_size*index,x)
		cs=strsum(left(stg_str,len(stg_str)-1))
		if cs<>asc(right(stg_str,1)) then
			setting_sg=EN_STG_STATUS_FAILURE	'invalid checksum
			exit function
		end if
		
		'checksum OK, make sure this setting has a valid value
		select case chr(sdr(num).stype)
		case "B":	'byte- convert into value
			i=asc(left(stg_str,1))
			stg_value=str(i)
			goto l1
						
		case "W":	'word- convert into value
			stg_str=left(stg_str,2)
			i=asc(left(stg_str,1))*256+asc(mid(stg_str,2,1))
			stg_value=str(i)
			goto l1

		case "S":	'string- take length
			stg_value=mid(stg_str,2,asc(left(stg_str,1)))
			i=asc(left(stg_str,1))
			goto l1
					
		case else:	'dot-decimal string- take length
			stg_value=ddstr(mid(stg_str,2,asc(left(stg_str,1))))
			i=asc(left(stg_str,1))
l1:			if i<sdr(num).p1 or i>sdr(num).p2 then
				setting_sg=EN_STG_STATUS_INVALID	'invalid checksum
				exit function
			end if
		end select		

		'OK, so this setting's value is OK and the stg_value is already set to it!
		setting_sg=EN_STG_STATUS_OK
		exit function
	
	else
		'Write! Branch according to the setting type and verify new value
		select case chr(sdr(num).stype)
		case "B":	'byte- convert into value
			i=val(stg_value)
			stg_str=chr(i)
			goto l2
						
		case "W":	'word- convert into value
			i=val(stg_value)
			x=i/256
			stg_str=chr(x)+chr(i-x*256)
			goto l2

		case "S":	'string
			stg_str=chr(len(stg_value))+stg_value
			i=len(stg_str)-1
			goto l2
					
		case else:	'dot-decimal string- take length
			stg_str=ddval(stg_value)
			stg_str=chr(len(stg_str))+stg_str
			i=len(stg_str)-1
l2:			if i<sdr(num).p1 or i>sdr(num).p2 then
				setting_sg=EN_STG_STATUS_INVALID	'invalid checksum
				exit function
			end if
		end select		
		
		'calculate checksum and add this checksum to the data
		cs=strsum(stg_str)
		stg_str=stg_str+chr(cs)
		
		'store the data into the EEPROM
		if stor.setdata(stg_str,sdr(num).eeaddr+sdr(num).member_size*index)<>len(stg_str) then
			'EEPROM write failure!
			setting_sg=EN_STG_STATUS_FAILURE
			exit function
		end if
		
	end if

	'completed successfully!
	setting_sg=EN_STG_STATUS_OK
end function


'-------------------------------------------------------------
public function setting_get_def(byref stg_name as string, byref def_value as string) as en_stg_status
'Extracts default value of specified setting. This got nothing to do with the EEPROM- the value
'is taken from the setting descriptor (setting.txt file). Default value is retured through def_value.
'Returns various en_stg_status status codes.

	dim num as byte
	dim pos as integer
	
	romfile.open("settings.txt")
	
	num=setting_find(stg_name)
	if num=0 then
		'unknown setting
		setting_get_def=EN_STG_STATUS_UNKNOWN
		exit function
	end if
	num=num-1
	
	'get default value field
	romfile.pointer=sdr(num).romaddr_def
	pos=romfile.find(romfile.pointer,chr(STG_END_OF_LINE),1)
	def_value=romfile.getdata(pos-romfile.pointer)

	'completed successfully!
	setting_get_def=EN_STG_STATUS_OK
end function


'-------------------------------------------------------------
public function setting_find(byref stg_name as string(2)) as byte
'finds setting by name in the sdr structure, returns member number+1
'if found, or 0 if not found.

	dim f as byte

	for f=0 to num_stg-1
		if sdr(f).name=stg_name then
			setting_find=f+1
			exit function
		end if
	next f
	setting_find=0
end function

